dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.4438
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.53
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.5064
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.5064
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_8), 3)) #.6879
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5064
pipeline_ps <- ParamSet$new(list(ParamDbl$new("lambda", lower = 0, upper = 1),
ParamDbl$new("alpha", lower = 0, upper = 1)))
res_inner <- rsmp("cv", folds = 5)
mes_inner <- msr("regr.mse")
terminator <- trm("evals") # define stopping criteria; consider increasing when I have enough computational power
#tuner <- tnr("random_search") # define tuning method
tuner <- tnr("grid_search", resolution =1000) # define tuning method
learner_el <- lrn("regr.glmnet")
# setting up the configuration for the autotuner
pipeline_at <- AutoTuner$new(
learner = learner_el,
resampling = res_inner,
measure = mes_inner,
search_space = pipeline_ps,
terminator = terminator,
tuner = tuner,
store_models = FALSE)
n_folds <- 10
# execute
plan("multisession", workers = 2) # sets up parallel processing with 2 workers
set.seed(2)
res_outer <- rsmp("cv", folds = n_folds)
invisible({ #used to suppress console output
capture.output({
nested_res <- resample(task = task_achiev, learner = pipeline_at, resampling = res_outer, store_models = TRUE)
})
})
invisible({ #used to suppress console output
capture.output({
nested_res <- resample(task = task_achiev, learner = pipeline_at, resampling = res_outer, store_models = TRUE)
})
})
plan("sequential") # reverts back to sequential processing after the parallel processing is done
plan("sequential") # reverts back to sequential processing after the parallel processing is done
# execute
plan("multisession", workers = 2) # sets up parallel processing with 2 workers
set.seed(2)
res_outer <- rsmp("cv", folds = n_folds)
invisible({ #used to suppress console output
capture.output({
nested_res <- resample(task = task_achiev, learner = pipeline_at, resampling = res_outer, store_models = TRUE)
})
})
#performance; consider changing the performance criterion later
mes_outer <- msr("regr.mse")
nested_res$aggregate(mes_outer)
nested_res$resampling
nested_res$aggregate(msr("regr.rsq")) # R2
#inspecting coefficients
trained_models <- nested_res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
coef_model <- model$model
coef_output <- as.matrix(coef_model$beta) %>% data.frame() # coef grind search
# coef_output <- as.matrix(coef(coef_model)) %>% data.frame() # coef random search
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
coef_ls[[paste0("all_", n_f)]] <- coef_output
coef_ls[[paste0("no_zero_", n_f)]] <- coef_output %>% filter(pull(., 1)!=0) # only contain rows where the coefficient is not zero
}
# compare the outcomes across folds
## performance measures
predictions_list <- nested_res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
round(unlist(cor_values), 3)
round(nested_res$score(msr("regr.rsq"))$regr.rsq,3)
round(nested_res$score(msr("regr.mse"))$regr.mse,3)
## hyperparameter
all_lambdas <-c()
for(n_k in vec_folds) {
all_lambdas[[n_k]] <- nested_res$learners[[n_k]]$tuning_result$lambda
}
round(unlist(all_lambdas),4)
all_alphas <-c()
for(n_k in vec_folds) {
all_alphas[[n_k]] <- nested_res$learners[[n_k]]$tuning_result$alpha
}
round(unlist(all_alphas), 4)
# variables that are selected in all five folds
always_selected <- reduce(list(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars,  coef_ls[["no_zero_3"]]$vars,coef_ls[["no_zero_4"]]$vars,  coef_ls[["no_zero_5"]]$vars,
coef_ls[["no_zero_6"]]$vars,coef_ls[["no_zero_7"]]$vars,  coef_ls[["no_zero_8"]]$vars),
coef_ls[["no_zero_9"]]$vars,coef_ls[["no_zero_10"]]$vars, intersect)
# # variables that are selected in 8 out of 10 folds
# Combine all variables into a single vector
all_vars <- c(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars,  coef_ls[["no_zero_3"]]$vars,coef_ls[["no_zero_4"]]$vars,  coef_ls[["no_zero_5"]]$vars,
coef_ls[["no_zero_6"]]$vars,coef_ls[["no_zero_7"]]$vars,  coef_ls[["no_zero_8"]]$vars,
coef_ls[["no_zero_9"]]$vars,coef_ls[["no_zero_10"]]$vars)
var_counts <- table(all_vars) # Count occurrences of each variable
nine_of_ten <- names(var_counts[var_counts >= 9]) # filter variables that appear at least 4 times
eight_of_ten <- names(var_counts[var_counts >= 8]) # filter variables that appear at least 4 times
seven_of_ten <- names(var_counts[var_counts >= 7]) # filter variables that appear at least 4 times
full_coef_ls <- coef_ls[-grep("^no_zero", names(coef_ls))]
dec_coef <- data.frame(matrix(ncol=1))
for(var in seven_of_ten){ # use variables that were mostly selected (possibly expand later)
dec_coef[var, "mean"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% mean()
dec_coef[var, "sd"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% sd()
}
dec_coef <- rownames_to_column(dec_coef, var= "var") %>%
select(var, mean, sd) %>%
filter(var !=1) %>%
mutate(nine_of_ten= ifelse(var %in% nine_of_ten, "yes", "no"))
set.seed(1)
rdesc <- rsmp ("cv", folds = n_folds)
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
# execute
plan("multisession", workers = 2) # sets up parallel processing with 2 workers
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.5064
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_8), 3)) #.6879
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.4504
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5129
## 7 out of 10
dat_achiev_sel_7 <- data %>% select(all_of(seven_of_ten), co_achiev)
task_achiev_sel_7 <- as_task_regr(dat_achiev_sel_7, id ="achiev_Lasso", target = "co_achiev")
res_7 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_7, resampling = rdesc, store_models = TRUE)
predictions_list_7 <- res$predictions()
cor_values_7 <- lapply(predictions_list_7, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_7), 3)) #.6879
mean(round(res_7$score(msr("regr.rsq"))$regr.rsq,3)) #.4396
mean(round(res_7$score(msr("regr.mse"))$regr.mse,3)) #.5239
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_8), 3)) #.6879
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.4504
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5129
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.5064
## 9 out of 10
dat_achiev_sel_9 <- data %>% select(all_of(nine_of_ten), co_achiev)
task_achiev_sel_9 <- as_task_regr(dat_achiev_sel_9, id ="achiev_Lasso", target = "co_achiev")
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
res_9 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_9, resampling = rdesc, store_models = TRUE)
predictions_list_9 <- res$predictions()
predictions_list_9 <- res$predictions()
cor_values_9 <- lapply(predictions_list_9, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_9), 3)) #.6879
mean(round(res_9$score(msr("regr.rsq"))$regr.rsq,3)) #.484
mean(round(res_9$score(msr("regr.mse"))$regr.mse,3)) #.5064
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.4504
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5129
## 7 out of 10
dat_achiev_sel_7 <- data %>% select(all_of(seven_of_ten), co_achiev)
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_8), 3)) #.6879
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.4504
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5129
## 8 out of 10
dat_achiev_sel_8 <- data %>% select(all_of(eight_of_ten), co_achiev)
task_achiev_sel_8 <- as_task_regr(dat_achiev_sel_8, id ="achiev_Lasso", target = "co_achiev")
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
res_8 <- resample(learner = lrn("regr.lm"), task = task_achiev_sel_8, resampling = rdesc, store_models = TRUE)
predictions_list_8 <- res$predictions()
predictions_list_8 <- res$predictions()
cor_values_8 <- lapply(predictions_list_8, function(pred) {
cor(pred$truth, pred$response)
})
mean(round(unlist(cor_values_8), 3)) #.6879
mean(round(res_8$score(msr("regr.rsq"))$regr.rsq,3)) #.4504
mean(round(res_8$score(msr("regr.mse"))$regr.mse,3)) #.5129
library(lubridate)
# Aktuelles Datum
heute <- today()
# Aktuelles Datum
heute <- today()
heute
# Ziel-Datum
zielDatum <- ymd("2023-02-08")
# Tage bis zum Ziel-Datum berechnen
tageBisZiel <- zielDatum - heute
# Ausgabe der Anzahl der Tage
print(paste("Es sind noch", tageBisZiel, "Tage bis zum 8. Februar 2023."))
# Ziel-Datum
zielDatum <- ymd("2024-02-08")
# Tage bis zum Ziel-Datum berechnen
tageBisZiel <- zielDatum - heute
# Tage bis zum Ziel-Datum berechnen
tageBisZiel <- zielDatum - heute
# Ausgabe der Anzahl der Tage
print(paste("Es sind noch", tageBisZiel, "Tage bis zum 8. Februar 2023."))
# Aktuelles Datum
heute <- ymd("2024-10-11")
# Ziel-Datum
zielDatum <- ymd("2024-02-08")
# Tage bis zum Ziel-Datum berechnen
tageBisZiel <- zielDatum - heute
# Ausgabe der Anzahl der Tage
print(paste("Es sind noch", tageBisZiel, "Tage bis zum 8. Februar 2023."))
# Aktuelles Datum
heute <- ymd("2023-10-11")
# Ziel-Datum
zielDatum <- ymd("2024-02-08")
# Tage bis zum Ziel-Datum berechnen
tageBisZiel <- zielDatum - heute
tageBisZiel
(function() {
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
(p3_adq_item == p1_clq_item_1) & is.null(p3_change_item1)
})()
})
})})()
})()
library(formr)
install.packages("formr")
(function() {
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
(p3_adq_item == p1_clq_item_1) & is.null(p3_change_item1)
})()
})
})})()
})()
(function() {
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
(p3_adq_item == p1_clq_item_1) & is.null(p3_change_item1)
})()
})
})})()
})()
library(formr)
install.packages("formr")
devtools::install_github("rubenarslan/formr")
(function() {
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
(p3_adq_item == p1_clq_item_1) & is.null(p3_change_item1)
})()
})
})})()
})()
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
assessment_project
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
is.na(p3_adq_item1) | & is.na(p3_change_item1)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
assessment_project$p1_clq_item_1
})()
si.make_a_choice = (function(){
is.na(p3_adq_item1) & is.na(p3_change_item1)
})()
})
})})()
assessment_project = as.data.frame(jsonlite::fromJSON("{\"p3_change_item_1\":[null],\"p1_clq_item_1\":[1],\"p3_adq_item_1\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
p3_adq_item_1 = (function(){
p1_clq_item_1
})()
si.make_a_choice = (function(){
(is.na(p3_adq_item_1) & is.na(p3_change_item_1)) |
((p3_adq_item_1 == p3_clq_item_1) & is.na(p3_change_item_1))
})()
})
})})()
item_3 <- NA
sum(item_1, item_2, item_3) == 100
item_1 <- 100
item_2 <- 2
item_3 <- NA
sum(item_1, item_2, item_3) == 100
sum(item_1, item_2, item_3, na.rm =TRUE) == 100
sum(item_1, item_2, item_3, na.rm =TRUE) == 100
sum(item_1, item_2, item_3, na.rm =TRUE) > 100
library(formr)
assessment_project = as.data.frame(jsonlite::fromJSON("{\"item_1_v1\":[null],\"item_1_v2\":[null],\"item_1_v3\":[null],\"item_1_v4\":[null],\"item_1_v5\":[null],\"item_1_v6\":[null],\"item_1_v7\":[null],\"item_1_v8\":[null],\"item_1_v9\":[null],\"item_1_v10\":[null]}"), stringsAsFactors=F)
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total =
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total =
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total = 0;
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total = 0;
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total = 0;
(function() {with(tail(assessment_project, 1), {
formr.showifs = list();
within(formr.showifs,  {
si.too_much_item_1 = (function(){
var total = 0;
var total = 0;
if (typeof item_1_v1 !== "undefined") total += item_1_v1;
library(here)
library(tidyverse)
library(psych)
dat1 <- read_delim(here("Data", "SNF_2019_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
glimpse(dat2)
table(dat1$Form)
distinct(as.character(dat1$Participant))
dat1 <- dat1 %>% mutate(ID = as.character(dat1$Participant))
# in study 2, two versions for each ESM variable exist; I don't know why but let's merge it for now
dat2 <- dat2 %>% mutate(ID = as.character(dat2$Participant),
Con_Exp = A_Con_Exp,
Con_Exp = ifelse(is.na(Con_Exp), B_Con_Exp, A_Con_Exp))
library(here)
library(tidyverse)
library(psych)
dat1 <- read_delim(here("Data", "SNF_2019_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
library(here)
library(tidyverse)
library(psych)
dat1 <- read_delim(here("Data", "SNF_2019_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
dat2 <- read_delim(here("Data", "SNF_2020_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
library(here)
library(tidyverse)
library(psych)
## can currently not open TSC project
# dat1 <- read_delim(here("Data", "SNF_2019_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
# dat2 <- read_delim(here("Data", "SNF_2020_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
setwd("~/Documents/02_Nebenprojekte/01_Siegen/Analysis Self-Control /Data")
dat2 <- read_delim("SNF_2020_combined.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
dat2 <- read_delim("SNF_2020_combined.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
## can currently not open TSC project
# dat1 <- read_delim(here("Data", "SNF_2019_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
# dat2 <- read_delim(here("Data", "SNF_2020_combined.csv"), delim = ";", escape_double = FALSE, trim_ws = TRUE)
setwd("~/Documents/02_Nebenprojekte/01_Siegen/Analysis Self-Control /Data")
dat2 <- read_delim("SNF_2020_combined.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(dat2)
dat1 <- dat1 %>% mutate(ID = as.character(dat1$Participant))
# in study 2, two versions for each ESM variable exist; I don't know why but let's merge it for now
dat2 <- dat2 %>% mutate(ID = as.character(dat2$Participant),
Con_Exp = A_Con_Exp,
Con_Exp = ifelse(is.na(Con_Exp), B_Con_Exp, A_Con_Exp))
length(unique(dat1$ID)) # 234
# in study 2, two versions for each ESM variable exist; I don't know why but let's merge it for now
dat2 <- dat2 %>% mutate(ID = as.character(dat2$Participant),
Con_Exp = A_Con_Exp,
Con_Exp = ifelse(is.na(Con_Exp), B_Con_Exp, A_Con_Exp))
length(unique(dat2$ID)) # 587  column partly contains feedback to the study
conflict_dat2 <- dat2 %>% filter(Con_Exp %in% c(1,2,3))
n <- distinct(conflict_dat2, Participant)
View(n)
nrow(conflict_dat2)/n
nrow(conflict_dat2)
n
nrow(conflict_dat2)/nrow(n)
