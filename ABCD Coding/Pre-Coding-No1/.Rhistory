geom_errorbar(aes(ymin = mean -sd , ymax = mean + sd), width=0.1) +
coord_flip()  # Optional: To make it a horizontal bar chart
all_lambdas
unlist(all_lambdas)
round(unlist(all_lambdas),4)
round(unlist(all_alphas), 4)
# compare the outcomes across folds
performance_table_rsq <- data.frame(nested_res$score(msr("regr.rsq")))
performance_table_rsq
# compare the outcomes across folds
nested_res$score(msr("regr.rsq"))$regr.rsq
ested_res$score(msr("regr.mse"))$regr.mse
nested_res$score(msr("regr.mse"))$regr.mse
# compare the outcomes across folds
round(nested_res$score(msr("regr.rsq"))$regr.rsq,3)
round(nested_res$score(msr("regr.mse"))$regr.mse,3)
predictions_list <- nested_res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
predictions_list
cor(pred$truth, pred$response)
predictions_list <- nested_res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
predictions_list
cor_values
round(unlist(cor_values), 3)
round(unlist(cor_values), 3)
round(nested_res$score(msr("regr.rsq"))$regr.rsq,3)
round(nested_res$score(msr("regr.mse"))$regr.mse,3)
# variables that are selected in all five folds
always_selected <- reduce(list(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars,  coef_ls[["no_zero_3"]]$vars,  coef_ls[["no_zero_4"]]$vars,  coef_ls[["no_zero_5"]]$vars), intersect)
always_selected
View(coef_ls)
# variables that are selected in all five folds
always_selected <- reduce(list(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars,  coef_ls[["no_zero_3"]]$vars,  coef_ls[["no_zero_4"]]$vars,  coef_ls[["no_zero_5"]]$vars), intersect)
# variables that are selected in 4 out of 5 folds
# Combine all variables into a single vector
all_vars <- c(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars, coef_ls[["no_zero_3"]]$vars, coef_ls[["no_zero_4"]]$vars, coef_ls[["no_zero_5"]]$vars)
full_coef_ls <- coef_ls[-grep("^no_zero", names(coef_ls))]
dec_coef <- data.frame(matrix(ncol=1))
for(var in mostly_selected){ # use variables that were mostly selected (possibly expand later)
dec_coef[var, "mean"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% mean()
dec_coef[var, "sd"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% sd()
}
dec_coef <- rownames_to_column(dec_coef, var= "var") %>%
select(var, mean, sd) %>%
filter(var !=1) %>%
mutate(always_selected = ifelse(var %in% always_selected, "yes", "no"))
dec_coef %>%
mutate(abs_mean =abs(mean),
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = mean)) +
geom_bar(stat = "identity", aes(fill= always_selected)) +
geom_errorbar(aes(ymin = mean -sd , ymax = mean + sd), width=0.1) +
coord_flip()  # Optional: To make it a horizontal bar chart
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= always_selected)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1) +
coord_flip()
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= always_selected)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1)
+
coord_flip()
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= always_selected)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1) +
coord_flip()
mostly_selected
rdesc <- rsmp ("cv", folds = 5)
dat_achiev_sel <- data %>% select(mostly_sel, co_achiev)
dat_achiev_sel <- data %>% select(vars %in% mostly_sel)
mostly_sel
dat_achiev_sel <- data %>% select(vars %in% mostly_selected)
dat_achiev_sel <- data %>% select(mostly_selected)
dat_achiev_sel <- data %>% select(all_of(mostly_selected))
dat_achiev_sel
dat_achiev_sel <- data %>% select(all_of(mostly_selected), co_achiev)
task_achiev_sel <- as_task_regr(dat_achiev_sel, id ="achiev_Lasso", target = "co_achiev")
dat_achiev_sel <- data %>% select(all_of(mostly_selected), co_achiev)
task_achiev_sel <- as_task_regr(dat_achiev_sel, id ="achiev_Lasso", target = "co_achiev")
rdesc <- rsmp ("cv", folds = 5)
res <- resample(learner = lm, task = task_achiev_sel, resampling = rdesc)
rdesc <- rsmp ("cv", folds = 5)
res <- resample(learner = lm, task = task_achiev_sel, resampling = rdesc)
dat_achiev_sel <- data %>% select(all_of(mostly_selected), co_achiev)
names(dat_achiev_sel)
glimpse(dat_achiev_sel)
View(dat_achiev_sel)
selected_vars <- data[mostly_selected]
glimpse(selected_vars)
mostly_selected]
mostly_selected
glimpse(data)
m_data <- read_csv(here("Data", "study01_finaldata.csv"))
data <- m_data %>% select(starts_with("m_")|# mindfulness items
starts_with("C_NEO")) # c items
glimpse(data)
# computing facet scores
data <- data %>% mutate(co_achiev = rowMeans(select(., starts_with("C_NEO_achiev"))),
co_compt= rowMeans(select(., starts_with("C_NEO_compt"))),
co_delib = rowMeans(select(., starts_with("C_NEO_delib"))),
co_disc = rowMeans(select(., starts_with("C_NEO_disc"))),
co_dut = rowMeans(select(., starts_with("C_NEO_dut"))),
co_ord = rowMeans(select(., starts_with("C_NEO_ord"))))
# recode items
recode_items <- data %>% select(ends_with("_r")) %>% names()
data[recode_items] <- 8 - data [recode_items]
# remove participants with missing data
data <- na.omit(data)
# remove all C items
data <- data %>% select(-starts_with("C_NEO"))
#standardize variables
data <- data %>% mutate(across(everything(), scale))
glimpse(data)
# computing facet scores
data <- data %>% mutate(co_achiev = rowMeans(select(., starts_with("C_NEO_achiev"))),
co_compt= rowMeans(select(., starts_with("C_NEO_compt"))),
co_delib = rowMeans(select(., starts_with("C_NEO_delib"))),
co_disc = rowMeans(select(., starts_with("C_NEO_disc"))),
co_dut = rowMeans(select(., starts_with("C_NEO_dut"))),
co_ord = rowMeans(select(., starts_with("C_NEO_ord"))))
glimpse(data)
data <- m_data %>% select(starts_with("m_")|# mindfulness items
starts_with("C_NEO")) # c items
glimpse(data)
# computing facet scores
data <- data %>% mutate(co_achiev = rowMeans(select(., starts_with("C_NEO_achiev"))),
co_compt= rowMeans(select(., starts_with("C_NEO_compt"))),
co_delib = rowMeans(select(., starts_with("C_NEO_delib"))),
co_disc = rowMeans(select(., starts_with("C_NEO_disc"))),
co_dut = rowMeans(select(., starts_with("C_NEO_dut"))),
co_ord = rowMeans(select(., starts_with("C_NEO_ord"))))
glimpse(data)
# recode items
recode_items <- data %>% select(ends_with("_r")) %>% names()
data[recode_items] <- 8 - data [recode_items]
glimpse(data)
# remove participants with missing data
data <- na.omit(data)
glimpse(data)
# remove all C items
data <- data %>% select(-starts_with("C_NEO"))
#standardize variables
data <- data %>% mutate(across(everything(), scale))
glimpse(data)
m_data <- read_csv(here("Data", "study01_finaldata.csv"))
m_data <- read_csv(here("Data", "study01_finaldata.csv"))
data <- m_data %>% select(starts_with("m_")|# mindfulness items
starts_with("C_NEO")) # c items
# computing facet scores
data <- data %>% mutate(co_achiev = rowMeans(select(., starts_with("C_NEO_achiev"))),
co_compt= rowMeans(select(., starts_with("C_NEO_compt"))),
co_delib = rowMeans(select(., starts_with("C_NEO_delib"))),
co_disc = rowMeans(select(., starts_with("C_NEO_disc"))),
co_dut = rowMeans(select(., starts_with("C_NEO_dut"))),
co_ord = rowMeans(select(., starts_with("C_NEO_ord"))))
# recode items
recode_items <- data %>% select(ends_with("_r")) %>% names()
data[recode_items] <- 8 - data [recode_items]
# remove participants with missing data
data <- na.omit(data)
# remove all C items
data <- data %>% select(-starts_with("C_NEO"))
#standardize variables
data <- data %>% mutate(across(everything(), ~ as.vector(scale(.))))
glimpse(data)
dat_achiev_sel <- data %>% select(all_of(mostly_selected), co_achiev)
glimpse(dat_achiev_sel)
rdesc <- rsmp ("cv", folds = 5)
res <- resample(learner = lm, task = task_achiev_sel, resampling = rdesc)
set.seed(1)
dat_achiev_sel <- data %>% select(all_of(mostly_selected), co_achiev)
task_achiev_sel <- as_task_regr(dat_achiev_sel, id ="achiev_Lasso", target = "co_achiev")
rdesc <- rsmp ("cv", folds = 5)
res <- resample(learner = lm, task = task_achiev_sel, resampling = rdesc)
res <- resample(learner = lrn("regr.lm"), task = task_achiev_sel, resampling = rdesc)
res$aggregate(mes)
res
predictions_list <- res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
round(unlist(cor_values), 3)
round(res$score(msr("regr.rsq"))$regr.rsq,3)
round(res$score(msr("regr.mse"))$regr.mse,3)
round(res$score(msr("regr.rsq"))$regr.rsq,3)
round(res$score(msr("regr.mse"))$regr.mse,3)
# get coefficients
trained_models <- res$learners
n_f
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
coef_model <- model$model
coef_model
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
model
# get coefficients
trained_models <- res$learners
# get coefficients
trained_models
res <- resample(learner = lrn("regr.lm"), task = task_achiev_sel, resampling = rdesc, store_models = TRUE)
# get coefficients
trained_models <- res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
model
coef_model <- model$model
model
model <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
View(model)
coef_output <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
View(model)
coef_output <- coef_output[-1,] # remove intercept
View(coef_output)
# get coefficients
trained_models <- res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
n_f
for(n_f in vec_folds){
coef_output <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
}
# get coefficients
trained_models <- res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
coef_output <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
}
coef_ls[[paste0(n_f)]] <- coef_output
# get coefficients
trained_models <- res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
coef_output <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
coef_ls[[paste0(n_f)]] <- coef_output
}
coef_ls[[n_f]] <- coef_output
View(coef_ls)
# plot results
full_coef_ls <- coef_ls
dec_coef <- data.frame(matrix(ncol=1))
for(var in mostly_selected){ # use variables that were mostly selected (possibly expand later)
dec_coef[var, "mean"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% mean()
dec_coef[var, "sd"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% sd()
}
dec_coef <- rownames_to_column(dec_coef, var= "var") %>%
select(var, mean, sd) %>%
filter(var !=1) %>%
mutate(always_selected = ifelse(var %in% always_selected, "yes", "no"))
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= always_selected)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1) +
coord_flip()
sometimes_selected <- names(var_counts[var_counts >= 2])
#inspecting coefficients
trained_models <- nested_res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
coef_model <- model$model
coef_output <- as.matrix(coef_model$beta) %>% data.frame() # coef grind search
# coef_output <- as.matrix(coef(coef_model)) %>% data.frame() # coef random search
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
coef_ls[[paste0("all_", n_f)]] <- coef_output
coef_ls[[paste0("no_zero_", n_f)]] <- coef_output %>% filter(pull(., 1)!=0) # only contain rows where the coefficient is not zero
}
# compare the outcomes across folds
## performance measures
predictions_list <- nested_res$predictions()
#inspecting coefficients
trained_models <- nested_res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
model <- trained_models[[n_f]]$model[[1]] # check the results of the first fold
coef_model <- model$model
coef_output <- as.matrix(coef_model$beta) %>% data.frame() # coef grind search
# coef_output <- as.matrix(coef(coef_model)) %>% data.frame() # coef random search
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
coef_ls[[paste0("all_", n_f)]] <- coef_output
coef_ls[[paste0("no_zero_", n_f)]] <- coef_output %>% filter(pull(., 1)!=0) # only contain rows where the coefficient is not zero
}
# compare the outcomes across folds
## performance measures
predictions_list <- nested_res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
round(unlist(cor_values), 3)
round(nested_res$score(msr("regr.rsq"))$regr.rsq,3)
# variables that are selected in all five folds
always_selected <- reduce(list(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars,  coef_ls[["no_zero_3"]]$vars,  coef_ls[["no_zero_4"]]$vars,  coef_ls[["no_zero_5"]]$vars), intersect)
# variables that are selected in 4 out of 5 folds
# Combine all variables into a single vector
all_vars <- c(coef_ls[["no_zero_1"]]$vars, coef_ls[["no_zero_2"]]$vars, coef_ls[["no_zero_3"]]$vars, coef_ls[["no_zero_4"]]$vars, coef_ls[["no_zero_5"]]$vars)
var_counts <- table(all_vars) # Count occurrences of each variable
mostly_selected <- names(var_counts[var_counts >= 4]) # filter variables that appear at least 4 times
sometimes_selected <- names(var_counts[var_counts >= 2])
sometimes_selected
sometimes_selected <- names(var_counts[var_counts >= 3])
sometimes_selected
set.seed(1)
dat_achiev_sel <- data %>% select(all_of(sometimes_selected), co_achiev)
task_achiev_sel <- as_task_regr(dat_achiev_sel, id ="achiev_Lasso", target = "co_achiev")
rdesc <- rsmp ("cv", folds = 5)
res <- resample(learner = lrn("regr.lm"), task = task_achiev_sel, resampling = rdesc, store_models = TRUE)
predictions_list <- res$predictions()
cor_values <- lapply(predictions_list, function(pred) {
cor(pred$truth, pred$response)
})
round(unlist(cor_values), 3)
round(res$score(msr("regr.rsq"))$regr.rsq,3)
round(res$score(msr("regr.mse"))$regr.mse,3)
# get coefficients
trained_models <- res$learners
coef_ls <- list()
vec_folds <- seq(1, n_folds, 1)
for(n_f in vec_folds){
coef_output <- as.data.frame(trained_models[[n_f]]$model[[1]]) # check the results of the first fold
names(coef_output) <- paste0("coef")
coef_output$vars <- row.names(coef_output)
coef_output <- coef_output[-1,] # remove intercept
coef_ls[[n_f]] <- coef_output
}
# plot results
full_coef_ls <- coef_ls
dec_coef <- data.frame(matrix(ncol=1))
for(var in sometimes_selected){ # use variables that were mostly selected (possibly expand later)
dec_coef[var, "mean"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% mean()
dec_coef[var, "sd"] <- map(full_coef_ls, ~filter(.x, vars == var)) %>% map_dbl(~ .x$coef) %>% sd()
}
not_in_one <- setdiff(mostly_selected, always_selected)
not_in_one
dec_coef <- rownames_to_column(dec_coef, var= "var") %>%
select(var, mean, sd) %>%
filter(var !=1) %>%
mutate(selection = case_when(var %in% always_selected ~ "always",
var %in% not_in_one ~ "mostly",
TRUE ~ "sometimes"))
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(always_selected),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= selection)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1) +
coord_flip()
dec_coef %>%
mutate(abs_mean =abs(mean), # direction of effect is removed
always_sel = as.factor(selection),
var = fct_reorder(var, abs_mean, .desc = FALSE)) %>%
ggplot(aes(x = var, y = abs_mean)) +
geom_bar(stat = "identity", aes(fill= selection)) +
geom_errorbar(aes(ymin = abs_mean -sd , ymax = abs_mean + sd), width=0.1) +
coord_flip()
setwd("~/Documents/02_Nebenprojekte/01_Siegen/ABCD Coding /Pre-Coding-No1")
setwd("~/Documents/02_Nebenprojekte/01_Siegen/ABCD Coding /Pre-Coding-No1")
library(readxl)
library(tidyverse)
library(irr)
library(readxl)
Pre_coding_13_11_2023_AB <- read_excel("Pre-coding-13-11-2023-AB.xlsx")
View(Pre_coding_13_11_2023_AB)
rater1 <- read_excel("Pre-coding-13-11-2023-AB.xlsx")
View(p_1)
View(rater1)
rater2 <- read_excel("Pre-coding-13-11-2023-Joko.xlsx")
View(rater2)
rater1 <- read_excel("Pre-coding-13-11-2023-AB.xlsx")
rater2 <- read_excel("Pre-coding-13-11-2023-Joko.xlsx")
rater3 <- read_excel("Pre-coding-13-11-2023-EK.xlsx")
rater4 <- read_excel("Pre-coding-13-11-2023-LK.xlsx")
rater5 <- read_excel("Pre-coding-13-11-2023-RD.xlsx")
rater6 <- read_excel("Pre-coding-13-11-2023-TT.xlsx")
rater3 <- read_excel("Pre-coding-No-1-13-11-2023-EK.xlsx")
rater3 <- read_excel("Pre-coding-No-1-13-11-2023_EK.xlsx")
rater3 <- read_excel("Pre-coding-No1-13-11-2023_EK.xlsx")
rater4 <- read_excel("Pre-coding-No1-13-11-2023_LK.xlsx")
rater5 <- read_excel("Pre-coding-No1-13-11-2023_RD.xlsx")
rater6 <- read_excel("Pre-coding-No1-13-11-2023_TT.xlsx")
View(rater1)
names(rater1)
a_codings <- cbind(rater1$`Affect %`, rater2$`Affect %`)
a_codings
a_codings <- cbind(rater1$`Affect %`, rater2$`Affect %`, rater3$`Affect %`, rater4$`Affect %`, rater5$`Affect %`, rater6$`Affect %`)
a_codings <- data.frame(cbind(rater1$`Affect %`, rater2$`Affect %`, rater3$`Affect %`, rater4$`Affect %`, rater5$`Affect %`, rater6$`Affect %`))
View(a_codings)
# Single Rater ICC --------------------------------------------------------
a_codings_icc31 <- icc(a_codings, model = "twoway", type = "agreement", unit = "single")
a_codings_icc31$value # .546
a_codings_icc36 <- icc(a_codings, model = "twoway", type = "agreement", unit = "average")
a_codings_icc36$value # .878
b_codings <- data.frame(cbind(rater1$`Behavior %`, rater2$`Behavior %`, rater3$`Behavior %`, rater4$`Behavior %`, rater5$`Behavior %`, rater6$`Behavior %`))
b_codings_icc31 <- icc(b_codings, model = "twoway", type = "agreement", unit = "single")
b_codings_icc31$value # .579
b_codings_icc36 <- icc(b_codings, model = "twoway", type = "agreement", unit = "average")
b_codings_icc36$value # .891
b_codings
View(b_codings)
c_codings <- data.frame(cbind(rater1$`Cognition %`, rater2$`Cognition %`, rater3$`Cognition %`, rater4$`Cognition %`, rater5$`Cognition %`, rater6$`Cognition %`))
View(c_codings)
d_codings <- data.frame(cbind(rater1$`Desire %`, rater2$`Desire %`, rater3$`Desire %`, rater4$`Desire %`,rater5$`Desire %`, rater6$`Desire %`,))
d_codings <- data.frame(cbind(rater1$`Desire %`, rater2$`Desire %`, rater3$`Desire %`, rater4$`Desire %`,rater5$`Desire %`, rater6$`Desire %`))
# Single Rater ICC --------------------------------------------------------
a_codings_icc31 <- icc(a_codings, model = "twoway", type = "agreement", unit = "single")
a_codings_icc31$value # .546
b_codings_icc31 <- icc(b_codings, model = "twoway", type = "agreement", unit = "single")
b_codings_icc31$value # .579
c_codings_icc31 <- icc(c_codings, model = "twoway", type = "agreement", unit = "single")
c_codings_icc31$value # .478
d_codings_icc31 <- icc(d_codings, model = "twoway", type = "agreement", unit = "single")
d_codings_icc31$value # .44
a_codings_icc36 <- icc(a_codings, model = "twoway", type = "agreement", unit = "average")
a_codings_icc36$value # .878
b_codings_icc36 <- icc(b_codings, model = "twoway", type = "agreement", unit = "average")
b_codings_icc36$value # .891
c_codings_icc36 <- icc(c_codings, model = "twoway", type = "agreement", unit = "average")
c_codings_icc36$value # .846
d_codings_icc36 <- icc(d_codings, model = "twoway", type = "agreement", unit = "average")
d_codings_icc36$value # .827
View(d_codings)
rater1 <- read_excel("Pre-coding-13-11-2023-AB.xlsx")
rater2 <- read_excel("Pre-coding-13-11-2023-Joko.xlsx")
rater3 <- read_excel("Pre-coding-No1-13-11-2023_EK.xlsx")
rater4 <- read_excel("Pre-coding-No1-13-11-2023_LK.xlsx")
rater5 <- read_excel("Pre-coding-No1-13-11-2023_RD.xlsx")
rater6 <- read_excel("Pre-coding-No1-13-11-2023_TT.xlsx")
a_codings <- data.frame(cbind(rater1$`Affect %`, rater2$`Affect %`, rater3$`Affect %`, rater4$`Affect %`, rater5$`Affect %`, rater6$`Affect %`))
b_codings <- data.frame(cbind(rater1$`Behavior %`, rater2$`Behavior %`, rater3$`Behavior %`, rater4$`Behavior %`, rater5$`Behavior %`, rater6$`Behavior %`))
c_codings <- data.frame(cbind(rater1$`Cognition %`, rater2$`Cognition %`, rater3$`Cognition %`, rater4$`Cognition %`, rater5$`Cognition %`, rater6$`Cognition %`))
d_codings <- data.frame(cbind(rater1$`Desire %`, rater2$`Desire %`, rater3$`Desire %`, rater4$`Desire %`,rater5$`Desire %`, rater6$`Desire %`))
# Single Rater ICC --------------------------------------------------------
a_codings_icc31 <- icc(a_codings, model = "twoway", type = "agreement", unit = "single")
a_codings_icc31$value # .628
b_codings_icc31 <- icc(b_codings, model = "twoway", type = "agreement", unit = "single")
b_codings_icc31$value # .69
c_codings_icc31 <- icc(c_codings, model = "twoway", type = "agreement", unit = "single")
c_codings_icc31$value # .54
d_codings_icc31 <- icc(d_codings, model = "twoway", type = "agreement", unit = "single")
d_codings_icc31$value # .39
a_codings_icc36 <- icc(a_codings, model = "twoway", type = "agreement", unit = "average")
a_codings_icc36$value # .91
b_codings_icc36 <- icc(b_codings, model = "twoway", type = "agreement", unit = "average")
b_codings_icc36$value # .93
c_codings_icc36 <- icc(c_codings, model = "twoway", type = "agreement", unit = "average")
c_codings_icc36$value # .87
d_codings_icc36 <- icc(d_codings, model = "twoway", type = "agreement", unit = "average")
d_codings_icc36$value # .79
library(readxl)
library(tidyverse)
library(irr)
setwd("~/Documents/02_Nebenprojekte/01_Siegen/ABCD Coding /Pre-Coding-No1")
rater1 <- read_excel("Pre-coding-13-11-2023-AB.xlsx")
rater2 <- read_excel("Pre-coding-13-11-2023-Joko.xlsx")
rater3 <- read_excel("Pre-coding-No1-13-11-2023_EK.xlsx")
rater4 <- read_excel("Pre-coding-No1-13-11-2023_LK.xlsx")
rater5 <- read_excel("Pre-coding-No1-13-11-2023_RD.xlsx")
rater6 <- read_excel("Pre-coding-No1-13-11-2023_TT.xlsx")
a_codings <- data.frame(cbind(rater1$`Affect %`, rater2$`Affect %`, rater3$`Affect %`, rater4$`Affect %`, rater5$`Affect %`, rater6$`Affect %`))
b_codings <- data.frame(cbind(rater1$`Behavior %`, rater2$`Behavior %`, rater3$`Behavior %`, rater4$`Behavior %`, rater5$`Behavior %`, rater6$`Behavior %`))
c_codings <- data.frame(cbind(rater1$`Cognition %`, rater2$`Cognition %`, rater3$`Cognition %`, rater4$`Cognition %`, rater5$`Cognition %`, rater6$`Cognition %`))
d_codings <- data.frame(cbind(rater1$`Desire %`, rater2$`Desire %`, rater3$`Desire %`, rater4$`Desire %`,rater5$`Desire %`, rater6$`Desire %`))
# Single Rater ICC --------------------------------------------------------
a_codings_icc31 <- icc(a_codings, model = "twoway", type = "agreement", unit = "single")
a_codings_icc31$value # .628
b_codings_icc31 <- icc(b_codings, model = "twoway", type = "agreement", unit = "single")
b_codings_icc31$value # .69
c_codings_icc31 <- icc(c_codings, model = "twoway", type = "agreement", unit = "single")
c_codings_icc31$value # .54
d_codings_icc31 <- icc(d_codings, model = "twoway", type = "agreement", unit = "single")
d_codings_icc31$value # .39
