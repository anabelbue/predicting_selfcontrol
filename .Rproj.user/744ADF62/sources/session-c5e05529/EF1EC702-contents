---
title: "03_EFA"
author: "Anabel Buechner"
date: "2023-12-19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



Load packages and data 
```{r}
library(psych)
library(mlr3verse)
library(mlr3pipelines)
library(paradox)
library(mlr3tuning)
library(glmnet)
library(DALEX)
library(future)
library(performance)
library(paran)
library(writexl)
library(gridExtra)
library(corrplot)
library(here)
library(tidyverse)
library(forcats)
library(lgr)
library(writexl)


data <- read_csv(here("Data", "prep_data.csv"))


#data <- data %>%  mutate(across(where(is.numeric) & !ends_with("ESM"), ~ ifelse(is.na(.), mean(., na.rm = TRUE),.)))
codebook <- readxl::read_excel(here("Data", "codebook.xlsx"))
add_codebook <- readxl::read_excel(here("Data", "Trait_items_construct_overview_table.xlsx")) # contains the correct information about the recoding
```


# Functions
```{r}

final_analysis <- function(data_set, target) {
    task <- as_task_regr(data_set, target = target)

    # Store results for each repetition
    results_list <- list()

    for (j in 1:10) {
        # Perform resampling
      
        n_folds <- 10  
        # Preprocessing and model pipeline
        graph_inner <- po("imputemean") %>>%
               po("scale") %>>%
               lrn("regr.lm")
        # Also standardize the target 
        graph <- ppl("targettrafo", graph_inner)
        learner <- as_learner(graph)

        invisible({ res <- resample(learner = learner, task = task, resampling = rsmp("cv", folds = n_folds),
                                    store_models = TRUE) })

        # Correlation with Fisher's z-transformation
        predictions_list <- res$predictions()
        cor_values <- lapply(predictions_list, function(pred) {
          cor(pred$truth, pred$response)
        })
        z_values <- 0.5 * log((1 + unlist(cor_values)) / (1 - unlist(cor_values)))
        mean_z <- mean(z_values, na.rm = TRUE)
        aggregated_cor <- (exp(2 * mean_z) - 1) / (exp(2 * mean_z) + 1)

        # R-squared and MSE
        mean_rsq <- res$aggregate(msr("regr.rsq"))
        mean_mse <- res$aggregate(msr("regr.mse"))
        
        trained_models <- res$learners
        coef_ls <- list()
        vec_folds <- seq(1, n_folds, 1)
        for(n_f in vec_folds){
            model <- trained_models[[n_f]]$model
            if(is.null(model)) next  # Skip if model is null
            # coef_output <- coef(model)
            coef_output <- coef(model$regr.lm$model)
            coef_output <- as.data.frame(coef_output)
           # names(coef_output) <- paste0("coef")
            coef_output$vars <- row.names(coef_output)
            coef_output <- coef_output[-1,]  # remove intercept 
            coef_ls[[n_f]] <- coef_output
        }
        
 # Return the results
        results_list[[j]] <- list(performance = list(cor = aggregated_cor, rsq = mean_rsq, mse = mean_mse), coefficients = coef_ls)
      
    }

    # Return the list of results
    return(results_list)
}

final_results <- final_analysis(task, outcome_var) 

calculate_stats <- function(coef_values) {
    n <- length(coef_values)
    coef_values <- unlist(coef_values)
    mean_val <- mean(coef_values)
    sd_val <- sd(coef_values)
    se_val <- sd_val / sqrt(n)  # Standard error
    return(c(mean = mean_val, se = se_val))
}

aggregate_coefficients <- function(final_results) {
    all_coefficients <- list()  # Initialize the list to store coefficients

    # Loop through your data structure (this part is assumed and should be adjusted based on your actual data structure)
    for (rep in 1:10) {
        for (fold in 1:10) {
            # Simulated example of extracting coefficients for each fold of each repetition
            coef_df <- final_results[[rep]]$coefficients[[fold]]
            for (i in 1:nrow(coef_df)) {
                var_name <- coef_df$vars[i]
                coef_value <- coef_df$coef_output[i]
                all_coefficients[[var_name]] <- c(all_coefficients[[var_name]], coef_value)
            }
        }
    }

    # Calculate statistics for each variable using lapply
    stats_list <- lapply(all_coefficients, calculate_stats)

    # Convert the list of stats to a DataFrame
    stats_df <- as.data.frame(stats_list)
    stats_df <- t(stats_df) %>% as.data.frame() %>% tibble::rownames_to_column("var")
    stats_df <- stats_df %>% dplyr::mutate(abs_mean = abs(mean),
                                           direction = ifelse(mean > 0, "positive", "negative"))
    return(stats_df)
}


plot_coefficents <- function(stats_df, text_size = 16, axis_title_size = 18, axis_text_size = 14) {

  # Reorder the variable factor based on abs_mean
  stats_df <- stats_df %>% mutate(variable = fct_reorder(var, abs_mean, .desc = FALSE))

  # Create the plot
  plot <- ggplot(stats_df, aes(x = variable, y = abs_mean)) +
    geom_bar(stat = "identity", aes(fill = direction)) +
    geom_errorbar(aes(ymin = abs_mean - se, ymax = abs_mean + se), width = 0.1) +
    coord_flip() +
    scale_fill_manual(values = c("positive" = "darkcyan", "negative" = "darkgoldenrod1")) +
    labs(x = "trait predictor", y = "absolute coefficient") +
    theme_minimal() +
    theme(text = element_text(size = text_size),
          axis.title = element_text(size = axis_title_size),
          axis.text = element_text(size = axis_text_size))

  return(plot)
}



ABCD_prep <- function(data, groups, single_items) {
  # Ensure that single_items is not NULL, and is a named list, if not skip renaming
  if (!is.null(single_items) && length(single_items) > 0 && !all(is.na(names(single_items)))) {
    # Filter and rename only if single_items is correctly specified
    singles <- data %>%
      filter(!(item_name %in% unlist(groups))) %>%
      mutate(item_name = ifelse(item_name %in% names(single_items), single_items[item_name], item_name))
  } else {
    # Proceed without renaming if single_items is empty or not correctly specified
    singles <- data %>%
      filter(!(item_name %in% unlist(groups)))
  }

  # Initialize an empty list to store results of group computations
  composites <- list()

  # Calculate means for each group and store results
  for (group_name in names(groups)) {
    # Filter data for the current group and summarize
    group_data <- data %>%
      filter(item_name %in% groups[[group_name]]) %>%
      summarise(across(c(affect, behavior, cognition, desire), mean, na.rm = TRUE)) %>%
      mutate(item_name = group_name)  # Assign the group name for identification

    # Append the computed data to the results list
    composites[[group_name]] <- group_data
  }

  # Bind all composite data into one dataframe
  composites <- dplyr::bind_rows(composites)

  # Combine single items and group results into one dataset
  combined <- dplyr::bind_rows(singles, composites)

  return(combined)
}



# Define the colors for the following plots 
colors <- brewer.pal(11, "Spectral")  # Access the Spectral palette with 11 colors
bar_colors <- colors[9:10]  # Select colors 9 and 10 for the bar plot
pie_colors <- colors[2:5]  # Select colors 2 to 5 for the pie charts
bar_colors <- colors[9:10]  # Select colors 9 and 10 for the bar plot

coefficient_plot_combined <- function(stats_df, title ="", reduce_x_axis = .6, font_family = "Arial", font_size_labels = 1.5, font_style_labels = 1, axis_label_size = 1.15, title_size = 1.5) {
  # Sort the data by absolute mean in descending order
  stats_df <- stats_df[order(abs(stats_df$abs_mean), decreasing = TRUE), ]
  
  # Determine the plot dimensions
  plot_width <- max(abs(stats_df$abs_mean)) * 1.5
  plot_height <- nrow(stats_df)
  
  # Initialize a new plot
  plot.new()
  
  # Set up plot with appropriate margins and font settings
  par(mar = c(5, 14, 2, 2), family = font_family, cex.lab = font_size_labels, font.lab = font_style_labels)
  
  # Create an empty plot with shared x-axis
  plot(0, type = "n", xlim = c(0, plot_width * 0.8), ylim = c(0.5, plot_height + 0.5),
       xlab = "absolute coefficients", ylab = "", axes = FALSE, main = title, cex.lab = font_size_labels, cex.main = title_size)
  
  # Calculate x-axis tick positions and labels
  x_ticks <- pretty(c(0, plot_width * reduce_x_axis), n = 5)
  x_labels <- round(x_ticks, digits = 2)  # Round to 2 decimal places for clarity
  
  # Ensure unique labels
  x_labels <- sprintf("%.2f", x_labels)
  
  # Add horizontal axis at the bottom with formatted labels
  axis(1, at = x_ticks, labels = x_labels, las = 1, col.axis = "black", col = "black", cex.axis = axis_label_size)
  axis(2, at = seq(1, plot_height), labels = rev(stats_df$var), las = 1, col.axis = "black", col = "black", tick = FALSE, cex.axis = axis_label_size)
  
  # # Draw a grid to help visualize the plotting area
  # abline(h = seq(1, plot_height, by = 1), col = "lightgray", lty = "dotted")
  # abline(v = x_ticks, col = "lightgray", lty = "dotted")
  
  # Draw the horizontal bars with adjusted width, no border, and moved to the left
  for (i in 1:nrow(stats_df)) {
    predictor_data <- stats_df[i, ]
    y_position <- plot_height - i + 1  # Adjust vertical position to reverse order
    rect(-0.1, y_position - 0.4, abs(predictor_data$abs_mean), y_position + 0.4,  # Adjust height for wider bars
         col = ifelse(predictor_data$direction == "positive", bar_colors[2], bar_colors[1]), border = NA)  # Remove border
  }
}

# Function to plot pie charts for each predictor
plot_pie_charts <- function(stats_df, font_family = "Arial", font_size_labels = 1.2, font_style_labels = 1) {
  # Function to draw pie chart segments within a circle
  draw_pie_chart_segments <- function(cx, cy, r, values, colors, start_angle = pi / 2) {
    total <- sum(values)
    angle_offset <- start_angle  # Start from 90 degrees (pi/2 radians)
    for (i in seq_along(values)) {
      end_angle <- angle_offset + (values[i] / total) * 2 * pi
      theta <- seq(angle_offset, end_angle, length.out = 100)
      x <- c(cx, cx + r * cos(theta), cx)  # Ensure it closes back to the center
      y <- c(cy, cy + r * sin(theta), cy)  # Ensure it closes back to the center
      polygon(x, y, col = colors[i], border = NA)
      angle_offset <- end_angle
    }
  }
  
  # Sort the data by absolute mean in descending order
  stats_df <- stats_df[order(abs(stats_df$abs_mean), decreasing = TRUE), ]
  
  # Determine the plot height
  plot_height <- nrow(stats_df)
  
  # Set up plot with appropriate margins and font settings
  par(mar = c(5, 12, 2, 2), family = font_family)
  
  # Create an empty plot with shared x-axis
  plot(1, type = "n", xlim = c(0, 1), ylim = c(0.5, plot_height + 0.5), xlab = "", ylab = "", axes = FALSE, main = "", asp = 1)
  
  # Draw grid to match the bar plot
  axis(2, at = seq(1, plot_height), labels = rev(stats_df$var), las = 1, col.axis = "black", col = "black", tick = FALSE, cex.axis = font_size_labels)
  # abline(h = seq(1, plot_height, by = 1), col = "lightgray", lty = "dotted")

  
  # Loop through each predictor to plot the pie charts
  for (i in 1:nrow(stats_df)) {
    predictor_data <- stats_df[i, ]
    y_position <- plot_height - i + 1  # Adjust vertical position to reverse order
    
    # Data for the pie chart
    pie_values <- c(predictor_data$affect, predictor_data$behavior, predictor_data$cognition, predictor_data$desire)
    
    # Calculate the center position for the pie chart
    cx <- 0.5  # Center horizontally in the plot
    cy <- y_position
    r <- 0.4  # Radius of the pie charts (adjusted for better fit)
    
    # Draw the pie chart segments within the circle
    draw_pie_chart_segments(cx, cy, r, pie_values, pie_colors)
  }
  
  # Reset plotting parameters to original
  par(mfrow = c(1, 1), mar = c(5, 12, 2, 2))
}


ABCD_plot <- function(stats_df, scaling_factor = 1.2, left_margin_size = 12, plus_minus_offset = 0.002, legend_position = "bottomright", font_family = "Arial", font_size_labels = 1.2, font_style_labels = 1, title = "") {
  # Arrange data by absolute mean
  stats_df <- stats_df %>%
    dplyr::arrange(abs_mean)
  
  # Define colors for the categories
  colors <- c("affect" = "cadetblue1", "behavior" = "cadetblue2", "cognition" = "cadetblue3", "desire" = "cadetblue4")
  
  # Setup plot area with adjusted margins for a flipped plot
  par(mar = c(5, left_margin_size, 6, 2) + 0.1, family = font_family, cex.lab = font_size_labels, font.lab = font_style_labels)  # Adjust margins to ensure space for everything
  
  
  
  # Calculate the total number of predictors and adjust plot height accordingly
  plot_height <- nrow(stats_df) * 1 + 0.2
  
  # Scale down means by a factor to reduce bar length
  stats_df$abs_mean <- stats_df$abs_mean / scaling_factor
  
  # Initialize flipped plot area
  plot(1, type = "n", ylim = c(0, plot_height), xlim = range(c(0, max(stats_df$abs_mean) * 1.1)),
       yaxt = "n", xlab = "absolute coefficient", ylab = "", main = title, col.axis = "grey30")
  
  # Custom y-axis labels
  axis(2, at = seq(1, by = 1, length.out = nrow(stats_df)), col.axis = "grey30", labels = stats_df$var, las = 1)
  

  # Drawing base bars and category segments within a loop for a flipped orientation
  for (i in 1:nrow(stats_df)) {
    predictor_pos <- i
    
    # Base bar for abs_mean
    rect(ybottom = predictor_pos - 0.3, ytop = predictor_pos + 0.3, xleft = 0, xright = stats_df$abs_mean[i], col = "grey80", border = NA)
    
    # Calculate cumulative ends for each category
    proportions <- c(stats_df$affect[i], stats_df$behavior[i], stats_df$cognition[i], stats_df$desire[i]) / 100 * stats_df$abs_mean[i]
    cum_ends <- cumsum(c(0, proportions))
    
    # Draw category segments
    for (j in 1:4) {
      rect(ybottom = predictor_pos - 0.3, ytop = predictor_pos + 0.3,
           xleft = cum_ends[j], xright = cum_ends[j+1], col = colors[j], border = NA)
    }
    
    # Indicate directionality with '+' for positive and '-' for negative effects
    text(x = stats_df$abs_mean[i] + plus_minus_offset, y = predictor_pos, 
         labels = ifelse(stats_df$direction[i] == "positive", "+", "-"), col = "black", cex = 1.5)
  }
  
  # Add a legend for the categories
  legend(legend_position, inset=c(-0.005,.05), legend = names(colors), fill = colors, title = "content", cex = 0.8, bty = "n")
}



```


# Frequency all conflicts 
```{r}
final_items_freq_all <- read_csv(here("Data", "final_var_frequency_all.csv")) %>% pull()
freq_all_dat <- data %>% dplyr::select(all_of(final_items_freq_all))

plot_list <- list()
for(v in final_items_freq_all ) {
    p <- ggplot(freq_all_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}


do.call(grid.arrange, c(plot_list, ncol = 4, nrow = 4))

# bivariate correlations among the items 
freq_all_items_cors <- cor(freq_all_dat, use ="complete.obs")
corrplot(freq_all_items_cors, type = "lower", method = "square")


# check requirements 
check_factorstructure(freq_all_dat)

# Identifying the number of factors
fa.parallel(freq_all_dat, n.iter=10000) # 3 factors 
vss(freq_all_dat) # suggest 1 factors 

# Test the different solutions using EFA

# Three factors oblimin rotation
EFA_freq_all_obl_3<- fa(freq_all_dat, nfactors = 3, rotate= "oblimin")
loadings_freq_all_obl_3 <- data.frame(matrix(EFA_freq_all_obl_3$loadings, ncol = 3)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
                              round(2)

# Three factors promax rotation
EFA_freq_all_pro_3<- fa(freq_all_dat, nfactors = 3, rotate= "promax")
loadings_freq_all_pro_3 <- data.frame(matrix(EFA_freq_all_pro_3$loadings, ncol = 3)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

#  exploratory two factor solution oblimin rotation
EFA_freq_all_obl_2<- fa(freq_all_dat, nfactors = 2, rotate= "oblimin")
loadings_freq_all_obl_2 <- data.frame(matrix(EFA_freq_all_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
                              round(2)


# exploratory two factor solution promax rotation
EFA_freq_all_pro_2<- fa(freq_all_dat, nfactors = 2, rotate= "promax")
loadings_freq_all_pro_2 <- data.frame(matrix(EFA_freq_all_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
                              round(2)


# add item text 
item_text_freq_all <- codebook %>% 
                        filter(item_name %in% final_items_freq_all) %>% 
                        dplyr::select(item_name, item_text_english)
# bring them in order 
item_text_freq_all <- item_text_freq_all[match(final_items_freq_all, item_text_freq_all$item_name), ]

# add bivariate correlations between items and predictor 
freq_predictor_items_cors <- round(cor(freq_all_dat, data$freq_con_all_ESM, use ="complete.obs"),2)


loadings_freq_all_obl_3 <- cbind(item_text_freq_all, loadings_freq_all_obl_3, freq_predictor_items_cors)
write_xlsx(loadings_freq_all_obl_3, here("EFA results", "freq_all_obl_3.xlsx"))

loadings_freq_all_pro_3 <- cbind(item_text_freq_all, loadings_freq_all_pro_3, freq_predictor_items_cors)
write_xlsx(loadings_freq_all_pro_3, here("EFA results", "freq_all_pro_3.xlsx"))

loadings_freq_all_obl_2 <- cbind(item_text_freq_all, loadings_freq_all_obl_2, freq_predictor_items_cors)
write_xlsx(loadings_freq_all_obl_2, here("EFA results", "freq_all_obl_2.xlsx"))

loadings_freq_all_pro_2 <- cbind(item_text_freq_all, loadings_freq_all_pro_2, freq_predictor_items_cors)
write_xlsx(loadings_freq_all_pro_2, here("EFA results", "freq_all_pro_2.xlsx"))

```
# Intensity all conflicts

```{r}
final_items_intensity_all <- read_csv(here("Data", "final_var_intensity_all.csv")) %>% pull()
intensity_all_dat <- data %>% dplyr::select(all_of(final_items_intensity_all))

plot_list <- list()
for(v in final_items_intensity_all ) {
    p <- ggplot(intensity_all_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +  
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}

do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 4))


# bivariate correlations among the items 
intensity_all_items_cors <- cor(intensity_all_dat, use ="complete.obs")
corrplot(intensity_all_items_cors, type = "lower", method = "square")


# check requirements 
check_factorstructure(intensity_all_dat)


# Identifying the number of factors
fa.parallel(intensity_all_dat, n.iter=10000) # 5 factors 
vss(intensity_all_dat) # suggest 3 factors 

# Test the different solutions using EFA

# Five factors oblimin rotation
EFA_intensity_all_obl_5<- fa(intensity_all_dat, nfactors = 5, rotate= "oblimin")
loadings_intensity_all_obl_5 <- data.frame(matrix(EFA_intensity_all_obl_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Five factors promax rotation
EFA_intensity_all_pro_5<- fa(intensity_all_dat, nfactors = 5, rotate= "promax")
loadings_intensity_all_pro_5 <- data.frame(matrix(EFA_intensity_all_pro_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors oblimin rotation
EFA_intensity_all_obl_2<- fa(intensity_all_dat, nfactors = 2, rotate= "oblimin")
loadings_intensity_all_obl_2 <- data.frame(matrix(EFA_intensity_all_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors promax rotation
EFA_intensity_all_pro_2<- fa(intensity_all_dat, nfactors = 2, rotate= "promax")
loadings_intensity_all_pro_2 <- data.frame(matrix(EFA_intensity_all_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors oblimin rotation
EFA_intensity_all_obl_4<- fa(intensity_all_dat, nfactors = 4, rotate= "oblimin")
loadings_intensity_all_obl_4 <- data.frame(matrix(EFA_intensity_all_obl_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors promax rotation
EFA_intensity_all_pro_4<- fa(intensity_all_dat, nfactors = 4, rotate= "promax")
loadings_intensity_all_pro_4 <- data.frame(matrix(EFA_intensity_all_pro_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

item_text_intensity_all <- codebook %>% 
                        filter(item_name %in% final_items_intensity_all) %>% 
                        dplyr::select(item_name, item_text_english)

# bring them in order 
item_text_intensity_all <- item_text_intensity_all[match(final_items_intensity_all,
                                                         item_text_intensity_all$item_name), ]


# bivariate correlations between items and predictor 
intensity_predictor_items_cors <- round(cor(intensity_all_dat, data$m_intensity_all_ESM, use= "complete.obs"),2)

#combine 
loadings_intensity_all_obl_5 <- cbind(item_text_intensity_all, loadings_intensity_all_obl_5, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_obl_5, here("EFA results", "intensity_all_obl_5.xlsx"))

loadings_intensity_all_pro_5 <- cbind(item_text_intensity_all, loadings_intensity_all_pro_5, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_pro_5, here("EFA results", "intensity_all_pro_5.xlsx"))

loadings_intensity_all_obl_2 <- cbind(item_text_intensity_all, loadings_intensity_all_obl_2, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_obl_2, here("EFA results", "intensity_all_obl_2.xlsx"))

loadings_intensity_all_pro_2 <- cbind(item_text_intensity_all, loadings_intensity_all_pro_2, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_pro_2, here("EFA results", "intensity_all_pro_2.xlsx"))

loadings_intensity_all_obl_4 <- cbind(item_text_intensity_all, loadings_intensity_all_obl_4, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_obl_4, here("EFA results", "intensity_all_obl_4.xlsx"))

loadings_intensity_all_pro_4 <- cbind(item_text_intensity_all, loadings_intensity_all_pro_4, intensity_predictor_items_cors)
write_xlsx(loadings_intensity_all_pro_4, here("EFA results", "intensity_all_pro_4.xlsx"))

```

# Success all conflicts
```{r}
#Get dataset and descriptive statistics

final_items_success_all <- read_csv(here("Data", "final_var_success_all.csv")) %>% pull()

success_all_dat <- data %>% dplyr::select(final_items_success_all)

plot_list <- list()
for(v in final_items_success_all) {
    p <- ggplot(success_all_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +  
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}

# Verwenden Sie grid.arrange, um die Plots anzuordnen
do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 4))


frequencies_plots<-  par(mfrow=c(5,3)) 
for(v in final_items_sucess_all){
  plot <- hist(success_all_dat[,v, drop = TRUE],  freq = TRUE, cex.axis = 1, breaks= 30,  cex.lab = 1, xlab= "", ylab="", main = v)
}


# bivariate correlations among the items 
success_all_items_cors <- cor(success_all_dat, use = "complete.obs")
corrplot(success_all_items_cors, type = "lower", method = "square")


#Requirements: Perform Bartlett test 
check_factorstructure(success_all_dat)

#Identifying the number of factors
fa.parallel(success_all_dat, n.iter=10000) # 5 factors 
vss(success_all_dat) # suggest 1 factor 

success_all_cor <- cor(succes_all_dat, use = "complete.obs")
corrplot(success_all_cor)
# also, a single factor is in any case too broad for our analyses purpose which is why only the five factor solution was considered 

#Test both solutions in the EFA

# Five factors oblimin rotation
EFA_success_all_obl_5 <- fa(success_all_dat, nfactors = 5, rotate= "oblimin")
loadings_success_all_obl_5 <- data.frame(matrix(EFA_success_all_obl_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.)< 0.1, NA, .))) %>% 
                              round(2)

# Five factors promax rotation
EFA_success_all_pro_5 <- fa(success_all_dat, nfactors = 5, rotate= "promax")
loadings_success_all_pro_5 <- data.frame(matrix(EFA_success_all_pro_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.)< 0.1, NA, .))) %>% 
                              round(2)

# exploratory  three factors oblimin solution
EFA_success_all_obl_3 <- fa(success_all_dat, nfactors = 3, rotate= "oblimin")
loadings_success_all_obl_3<- data.frame(matrix(EFA_success_all_obl_3$loadings, ncol = 3)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.)< 0.1, NA, .))) %>% 
                              round(2)

EFA_success_all_pro_3 <- fa(success_all_dat, nfactors = 3, rotate= "promax")
loadings_success_all_pro_3<- data.frame(matrix(EFA_success_all_pro_3$loadings, ncol = 3)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.)< 0.1, NA, .))) %>% 
                              round(2)


item_text_success_all <- codebook %>% 
                        filter(item_name %in% final_items_success_all) %>% 
                        dplyr::select(item_name, item_text_english)

# bring them in order 
item_text_success_all <- item_text_success_all[match(final_items_success_all, item_text_success_all$item_name), ]

# bivariate correlations between items and predictor 
success_predictor_items_cors <- round(cor(success_all_dat, data$m_success_all_ESM, use = "complete.obs"),2)

# combine 
loadings_success_all_obl_5 <- cbind(item_text_success_all, loadings_success_all_obl_5, success_predictor_items_cors)
write_xlsx(loadings_success_all_obl_5, here("EFA results", "success_all_obl_5.xlsx"))

loadings_success_all_pro_5 <- cbind(item_text_success_all, loadings_success_all_pro_5, success_predictor_items_cors)
write_xlsx(loadings_success_all_pro_5, here("EFA results", "success_all_pro_5.xlsx"))

loadings_success_all_obl_3<- cbind(item_text_success_all, loadings_success_all_obl_3, success_predictor_items_cors)
write_xlsx(loadings_success_all_obl_3, here("EFA results", "success_all_obl_3.xlsx"))

loadings_success_all_pro_3<- cbind(item_text_success_all, loadings_success_all_pro_3, success_predictor_items_cors)
write_xlsx(loadings_success_all_pro_3, here("EFA results", "success_all_pro_3.xlsx"))
                              



```


# Frequency initiation 
```{r}
final_items_freq_init <- read_csv(here("Data", "final_var_frequency_init.csv")) %>% pull()
freq_init_dat <- data %>% dplyr::select(all_of(final_items_freq_init))

plot_list <- list()
for(v in final_items_freq_init) {
    p <- ggplot(freq_init_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}


do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 2))

# bivariate correlations among the items 
freq_init_items_cors <- cor(freq_init_dat, use = "complete.obs")
corrplot(freq_init_items_cors, type = "lower", method = "square")

# check requirements 
check_factorstructure(freq_init_dat)

# Identifying the number of factors
fa.parallel(freq_init_dat, n.iter=10000) # 2 factors 
vss(freq_init_dat) # suggest 1 factors 


# Two factors oblimin rotation
EFA_freq_init_obl_2<- fa(freq_init_dat, nfactors = 2, rotate= "oblimin")
loadings_freq_init_obl_2<- data.frame(matrix(EFA_freq_init_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors promax rotation
EFA_freq_init_pro_2<- fa(freq_init_dat, nfactors = 2, rotate= "promax")
loadings_freq_init_pro_2<- data.frame(matrix(EFA_freq_init_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

item_text_freq_init <- codebook %>% 
                        filter(item_name %in% final_items_freq_init) %>% 
                        dplyr::select(item_name, item_text_english)
# bring them in order 
item_text_freq_init <- item_text_freq_init[match(final_items_freq_init,item_text_freq_init$item_name), ]

# bivariate correlations between items and predictor 
freq_init_predictor_items_cors <- round(cor(freq_init_dat, data$freq_con_init_ESM, use ="complete.obs"),2)

#combine 
loadings_freq_init_obl_2 <- cbind(item_text_freq_init, loadings_freq_init_obl_2, freq_init_predictor_items_cors)
write_xlsx(loadings_freq_init_obl_2, here("EFA results", "freq_init_obl_2.xlsx"))

loadings_freq_init_pro_2 <- cbind(item_text_freq_init, loadings_freq_init_pro_2, freq_init_predictor_items_cors)
write_xlsx(loadings_freq_init_pro_2, here("EFA results", "freq_init_pro_2.xlsx"))





  
```





# Frequency persistence conflicts
```{r}
final_items_freq_pers <- read_csv(here("Data", "final_var_frequency_pers.csv")) %>% pull()
freq_pers_dat <- data %>% dplyr::select(all_of(final_items_freq_pers))

names(freq_pers_dat) == final_items_freq_pers
plot_list <- list()
for(v in final_items_freq_pers) {
    p <- ggplot(freq_all_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}


do.call(grid.arrange, c(plot_list, ncol = 4, nrow = 3))

# bivariate correlations among the items 
freq_pers_items_cors <- cor(freq_pers_dat, use = "complete.obs")
corrplot(freq_pers_items_cors, type = "lower", method = "square")

# check requirements 
check_factorstructure(freq_pers_dat)

# Identifying the number of factors
fa.parallel(freq_pers_dat, n.iter=10000) # 4 factors 
vss(freq_pers_dat) # suggest 1 factors 

# Four factors oblimin rotation
EFA_freq_pers_obl_4<- fa(freq_pers_dat, nfactors = 4, rotate= "oblimin")
loadings_freq_pers_obl_4<- data.frame(matrix(EFA_freq_pers_obl_4$loadings, ncol = 4)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors promax rotation
EFA_freq_pers_pro_4<- fa(freq_pers_dat, nfactors = 4, rotate= "promax")
loadings_freq_pers_pro_4<- data.frame(matrix(EFA_freq_pers_pro_4$loadings, ncol = 4)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)


# Exploratry three factors oblimin rotation
EFA_freq_pers_obl_3<- fa(freq_pers_dat, nfactors = 3, rotate= "oblimin")
loadings_freq_pers_obl_3<- data.frame(matrix(EFA_freq_pers_obl_3$loadings, ncol = 3)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Exploratry three factors promax rotation
EFA_freq_pers_pro_3<- fa(freq_pers_dat, nfactors = 3, rotate= "promax")
loadings_freq_pers_pro_3<- data.frame(matrix(EFA_freq_pers_pro_3$loadings, ncol = 3)) %>%
                              # omit all laodings below .1 for enhanced readibility 
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

#  two factor solution oblimin rotation
EFA_freq_pers_obl_2<- fa(freq_pers_dat, nfactors = 2, rotate= "oblimin")
loadings_freq_pers_obl_2<- data.frame(matrix(EFA_freq_pers_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Exploratry two factor solution promax rotation
EFA_freq_pers_pro_2<- fa(freq_pers_dat, nfactors = 2, rotate= "promax")
loadings_freq_pers_pro_2<- data.frame(matrix(EFA_freq_pers_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# add item text 
item_text_freq_pers <- codebook %>% 
                        filter(item_name %in% final_items_freq_pers) %>% 
                        dplyr::select(item_name, item_text_english)
# bring them in order 
item_text_freq_pers <- item_text_freq_pers[match(final_items_freq_pers,item_text_freq_pers$item_name), ]

# bivariate correlations between items and predictor 
freq_pers_predictor_items_cors <- round(cor(freq_pers_dat, data$freq_con_pers_ESM, use ="complete.obs"),2)

#combine 
loadings_freq_pers_obl_4 <- cbind(item_text_freq_pers, loadings_freq_pers_obl_4, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_obl_4, here("EFA results", "freq_pers_obl_4.xlsx"))

loadings_freq_pers_pro_4 <- cbind(item_text_freq_pers, loadings_freq_pers_pro_4, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_pro_4, here("EFA results", "freq_pers_pro_3.xlsx"))

loadings_freq_pers_obl_3 <- cbind(item_text_freq_pers, loadings_freq_pers_obl_3, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_obl_3, here("EFA results", "freq_pers_obl_3.xlsx"))

loadings_freq_pers_pro_3 <- cbind(item_text_freq_pers, loadings_freq_pers_pro_3, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_pro_3, here("EFA results", "freq_pers_pro_3.xlsx"))

loadings_freq_pers_obl_2 <- cbind(item_text_freq_pers, loadings_freq_pers_obl_2, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_obl_2, here("EFA results", "freq_pers_obl_2.xlsx"))

loadings_freq_pers_pro_2 <- cbind(item_text_freq_pers, loadings_freq_pers_pro_2, freq_pers_predictor_items_cors)
write_xlsx(loadings_freq_pers_pro_2, here("EFA results", "freq_pers_pro_2.xlsx"))





```




# Intensity initiation conflicts
No EFA was computed since only two items were selected as most important trait predictors 
```{r}
final_items_intensity_init <- read_csv(here("Data", "final_var_intensity_init.csv")) %>% pull()
intensity_init_dat <- data %>% dplyr::select(all_of(final_items_intensity_init))

plot_list <- list()
for(v in final_items_intensity_init) {
    p <- ggplot(intensity_init_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}

# bivariate correlations among the items 
intensity_init_items_cor <- cor(intensity_init_dat, use = "complete.obs")
corrplot(intensity_init_items_cor, type = "lower", method = "square")




```


# Intensity persistence conflicts

```{r}
final_items_intensity_pers <- read_csv(here("Data", "final_var_intensity_pers.csv")) %>% pull()
intensity_pers_dat <- data %>% dplyr::select(all_of(final_items_intensity_pers))

plot_list <- list()
for(v in final_items_intensity_pers) {
    p <- ggplot(intensity_pers_dat, aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) +
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}


do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 4))

# bivariate correlations among the items 
intensity_pers_items_cors <- cor(intensity_pers_dat, use = "complete.obs")
corrplot(intensity_pers_items_cors, type = "lower", method = "square")

# check requirements 
check_factorstructure(intensity_pers_dat)

# Identifying the number of factors
fa.parallel(intensity_pers_dat, n.iter=10000) # 5 factors 
vss(intensity_pers_dat) # suggest 2 factors 

# Five factors oblimin rotation
EFA_intensity_pers_obl_5<- fa(intensity_pers_dat, nfactors = 5, rotate= "oblimin")
loadings_intensity_pers_obl_5<- data.frame(matrix(EFA_intensity_pers_obl_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Five factors promax rotation
EFA_intensity_pers_pro_5<- fa(intensity_pers_dat, nfactors = 5, rotate= "promax")
loadings_intensity_pers_pro_5<- data.frame(matrix(EFA_intensity_pers_pro_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors oblimin rotation
EFA_intensity_pers_obl_2<- fa(intensity_pers_dat, nfactors = 2, rotate= "oblimin")
loadings_intensity_pers_obl_2<- data.frame(matrix(EFA_intensity_pers_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors promax rotation
EFA_intensity_pers_pro_2<- fa(intensity_pers_dat, nfactors = 2, rotate= "promax")
loadings_intensity_pers_pro_2<- data.frame(matrix(EFA_intensity_pers_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors oblimin rotation
EFA_intensity_pers_obl_4<- fa(intensity_pers_dat, nfactors = 4, rotate= "oblimin")
loadings_intensity_pers_obl_4<- data.frame(matrix(EFA_intensity_pers_obl_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors promax rotation
EFA_intensity_pers_pro_4<- fa(intensity_pers_dat, nfactors = 4, rotate= "promax")
loadings_intensity_pers_pro_4<- data.frame(matrix(EFA_intensity_pers_pro_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)


item_text_intensity_pers <- codebook %>% 
                        filter(item_name %in% final_items_intensity_pers) %>% 
                        dplyr::select(item_name, item_text_english)
# bring them in order 
item_text_intensity_pers <- item_text_intensity_pers[match(final_items_intensity_pers,item_text_intensity_pers$item_name), ]

# bivariate correlations between items and predictor 
intensity_pers_predictor_items_cors <- round(cor(intensity_pers_dat, data$m_intensity_pers_ESM, use="complete.obs"),2)

#combine 
loadings_intensity_pers_obl_5 <- cbind(item_text_intensity_pers, loadings_intensity_pers_obl_5,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_obl_5, here("EFA results", "intensity_pers_obl_5.xlsx"))

loadings_intensity_pers_pro_5 <- cbind(item_text_intensity_pers, loadings_intensity_pers_pro_5,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_pro_5, here("EFA results", "intensity_pers_pro_5.xlsx"))

loadings_intensity_pers_obl_2 <- cbind(item_text_intensity_pers, loadings_intensity_pers_obl_2,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_obl_2, here("EFA results", "intensity_pers_obl_2.xlsx"))

loadings_intensity_pers_pro_2 <- cbind(item_text_intensity_pers, loadings_intensity_pers_pro_2,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_pro_2, here("EFA results", "intensity_pers_pro_2.xlsx"))

loadings_intensity_pers_obl_4<- cbind(item_text_intensity_pers, loadings_intensity_pers_obl_4,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_obl_4, here("EFA results", "intensity_pers_obl_4.xlsx"))

loadings_intensity_pers_pro_4<- cbind(item_text_intensity_pers, loadings_intensity_pers_pro_4,
                                       intensity_pers_predictor_items_cors)
write_xlsx(loadings_intensity_pers_pro_4, here("EFA results", "intensity_pers_pro_4.xlsx"))







```

# Success initiation conflict 

```{r}

final_items_success_init <- read_csv(here("Data", "final_var_success_init.csv")) %>% pull()
success_init_dat <- data %>% dplyr::select(all_of(final_items_success_init))

plot_list <- list()
for(v in final_items_success_init) {
    p <- ggplot(success_init_dat,  aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) 
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}

do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 5))

# bivariate correlations among the items 
success_init_items_cors <- cor(success_init_dat, use = "complete.obs")
corrplot(success_init_items_cors, type = "lower", method = "square")



# check requirements 
check_factorstructure(success_init_dat)


# Identifying the number of factors
fa.parallel(success_init_dat, n.iter=10000) # 7 factors 
vss(success_init_dat) # suggest 1 factors 

# Seven factors oblimin rotation
EFA_success_init_obl_7 <- fa(success_init_dat, nfactors = 7,  rotate= "oblimin")
loadings_success_init_obl_7 <- data.frame(matrix(EFA_success_init_obl_7$loadings, ncol = 7)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Seven factors promax rotation
EFA_success_init_pro_7 <- fa(success_init_dat, nfactors = 7,  rotate= "promax")
loadings_success_init_pro_7 <- data.frame(matrix(EFA_success_init_pro_7$loadings, ncol = 7)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# # exploratory six factors oblimin rotation
# EFA_success_init_obl_6 <- fa(success_init_dat, nfactors = 6,  rotate= "oblimin")
# loadings_success_init_obl_6 <- data.frame(matrix(EFA_success_init_obl_6$loadings, ncol = 6)) %>%
#                               mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
#                               round(2)
# 
# # exploratory six factors promax rotation
# EFA_success_init_pro_6 <- fa(success_init_dat, nfactors = 6,  rotate= "promax")
# loadings_success_init_pro_6 <- data.frame(matrix(EFA_success_init_pro_6$loadings, ncol = 6)) %>%
#                               mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
#                               round(2)



# Five factors oblimin rotation
EFA_success_init_obl_5 <- fa(success_init_dat, nfactors = 5,  rotate= "oblimin")
loadings_success_init_obl_5 <- data.frame(matrix(EFA_success_init_obl_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
                              round(2)

# Five factors promax rotation
EFA_success_init_pro_5 <- fa(success_init_dat, nfactors = 5,  rotate= "promax")
loadings_success_init_pro_5 <- data.frame(matrix(EFA_success_init_pro_5$loadings, ncol = 5)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
                              round(2)
                              
# # Four factors oblimin rotation
# EFA_success_init_obl_4 <- fa(success_init_dat, nfactors = 4,  rotate= "oblimin")
# loadings_success_init_obl_4 <- data.frame(matrix(EFA_success_init_obl_4$loadings, ncol = 4)) %>%
#                               mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
#                               round(2)
# 
# # Four factors promax rotation
# EFA_success_init_pro_4 <- fa(success_init_dat, nfactors = 4,  rotate= "promax")
# loadings_success_init_pro_4 <- data.frame(matrix(EFA_success_init_pro_4$loadings, ncol = 4)) %>%
#                               mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>%
#                               round(2)
#                               
                              
                              

item_text_success_init <- codebook %>% 
                        filter(item_name %in% final_items_success_init) %>% 
                        dplyr::select(item_name, item_text_english)


# bring them in order 
item_text_success_init <- item_text_success_init[match(final_items_success_init,
                                                         item_text_success_init$item_name), ]


# bivariate correlations between items and predictor 
success_init_predictor_items_cors <-round(cor(success_init_dat,data$m_success_init_ESM,use="complete.obs"),2)

#combine 
loadings_success_init_obl_7<- cbind(item_text_success_init, loadings_success_init_obl_7, success_init_predictor_items_cors)
write_xlsx(loadings_success_init_obl_7, here("EFA results", "success_init_obl_7.xlsx"))

loadings_success_init_pro_7<- cbind(item_text_success_init, loadings_success_init_pro_7, success_init_predictor_items_cors)
write_xlsx(loadings_success_init_pro_7, here("EFA results", "success_init_pro_7.xlsx"))

# loadings_success_init_obl_6<- cbind(item_text_success_init, loadings_success_init_obl_6, success_init_predictor_items_cors)
# write_xlsx(loadings_success_init_obl_6, here("EFA results", "success_init_obl_6.xlsx"))
# 
# loadings_success_init_pro_6<- cbind(item_text_success_init, loadings_success_init_pro_6, success_init_predictor_items_cors)
# write_xlsx(loadings_success_init_pro_6, here("EFA results", "success_init_pro_6.xlsx"))

loadings_success_init_obl_5<- cbind(item_text_success_init, loadings_success_init_obl_5, success_init_predictor_items_cors)
write_xlsx(loadings_success_init_obl_5, here("EFA results", "success_init_obl_5.xlsx"))

loadings_success_init_pro_5<- cbind(item_text_success_init, loadings_success_init_pro_5, success_init_predictor_items_cors)
write_xlsx(loadings_success_init_pro_5, here("EFA results", "success_init_pro_5.xlsx"))

# loadings_success_init_obl_4<- cbind(item_text_success_init, loadings_success_init_obl_4, success_init_predictor_items_cors)
# write_xlsx(loadings_success_init_obl_4, here("EFA results", "success_init_obl_4.xlsx"))
# 
# loadings_success_init_pro_4<- cbind(item_text_success_init, loadings_success_init_pro_4, success_init_predictor_items_cors)
# write_xlsx(loadings_success_init_pro_4, here("EFA results", "success_init_pro_4.xlsx"))




```





# Success persistence conflict 

```{r}

final_items_success_pers <- read_csv(here("Data", "final_var_success_pers.csv")) %>% pull()
success_pers_dat <- data %>% dplyr::select(all_of(final_items_success_pers))

plot_list <- list()
for(v in final_items_success_pers) {
    p <- ggplot(success_pers_dat,  aes_string(x=v)) + 
         geom_histogram(bins = 30) +
         theme_minimal(base_size = 10) 
         #coord_fixed(ratio = 1) +  
         labs(title = v, x = "", y = "")
    plot_list[[v]] <- p
}

do.call(grid.arrange, c(plot_list, ncol = 5, nrow = 3))

# bivariate correlations among the items 
success_pers_items_cors <- cor(success_pers_dat, use = "complete.obs")
corrplot(success_pers_items_cors, type = "lower", method = "square")



# check requirements 
check_factorstructure(success_pers_dat)


# Identifying the number of factors
fa.parallel(success_pers_dat, n.iter=10000) # 4factors 
vss(success_pers_dat) # suggest 1 factors 


# Four factors oblimin rotation
EFA_success_pers_obl_4 <- fa(success_pers_dat, nfactors = 4,  rotate= "oblimin")
loadings_success_pers_obl_4<- data.frame(matrix(EFA_success_pers_obl_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Four factors promax rotation
EFA_success_pers_pro_4 <- fa(success_pers_dat, nfactors = 4,  rotate= "promax")
loadings_success_pers_pro_4<- data.frame(matrix(EFA_success_pers_pro_4$loadings, ncol = 4)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Three factors oblimin rotation
EFA_success_pers_obl_3 <- fa(success_pers_dat, nfactors = 3,  rotate= "oblimin")
loadings_success_pers_obl_3<- data.frame(matrix(EFA_success_pers_obl_3$loadings, ncol = 3)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Three factors promax rotation
EFA_success_pers_pro_3 <- fa(success_pers_dat, nfactors = 3,  rotate= "promax")
loadings_success_pers_pro_3<- data.frame(matrix(EFA_success_pers_pro_3$loadings, ncol = 3)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors oblimin rotation
EFA_success_pers_obl_2 <- fa(success_pers_dat, nfactors = 2,  rotate= "oblimin")
loadings_success_pers_obl_2<- data.frame(matrix(EFA_success_pers_obl_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)

# Two factors promax rotation
EFA_success_pers_pro_2 <- fa(success_pers_dat, nfactors = 2,  rotate= "promax")
loadings_success_pers_pro_2<- data.frame(matrix(EFA_success_pers_pro_2$loadings, ncol = 2)) %>%
                              mutate(across(where(is.numeric), ~ ifelse(abs(.) < 0.1, NA, .))) %>% 
                              round(2)
                            
item_text_success_pers <- codebook %>% 
                        filter(item_name %in% final_items_success_pers) %>% 
                        dplyr::select(item_name, item_text_english)


# bring them in order 
item_text_success_pers <- item_text_success_pers[match(final_items_success_pers,
                                                         item_text_success_pers$item_name), ]


# bivariate correlations between items and predictor 
success_pers_predictor_items_cors <-round(cor(success_pers_dat,data$m_success_pers_ESM,use="complete.obs"),2)

#combine 
loadings_success_pers_obl_4 <- cbind(item_text_success_pers, loadings_success_pers_obl_4, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_obl_4, here("EFA results", "success_pers_obl_4.xlsx"))

loadings_success_pers_pro_4 <- cbind(item_text_success_pers, loadings_success_pers_pro_4, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_pro_4, here("EFA results", "success_pers_pro_4.xlsx"))

loadings_success_pers_obl_3 <- cbind(item_text_success_pers, loadings_success_pers_obl_3, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_obl_3, here("EFA results", "success_pers_obl_3.xlsx"))

loadings_success_pers_pro_3 <- cbind(item_text_success_pers, loadings_success_pers_pro_3, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_pro_3, here("EFA results", "success_pers_pro_3.xlsx"))

loadings_success_pers_obl_2 <- cbind(item_text_success_pers, loadings_success_pers_obl_2, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_obl_2, here("EFA results", "success_pers_obl_2.xlsx"))

loadings_success_pers_pro_2 <- cbind(item_text_success_pers, loadings_success_pers_pro_2, success_pers_predictor_items_cors)
write_xlsx(loadings_success_pers_pro_2, here("EFA results", "success_pers_pro_2.xlsx"))



    

```





